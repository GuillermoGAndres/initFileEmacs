
* Informacion 
#+BEGIN_SRC emacs-lisp
; Referencias
; https://github.com/wasamasa/dotemacs/blob/master/init.org#init
; https://github.com/howardabrams/dot-files/blob/master/emacs.org
; https://github.com/neppramod/java_emacs
; https://github.com/shackra/emacs
; http://pages.sachachua.com/.emacs.d/Sacha.html#babel-init
; https://github.com/mgrbyte/emacs.d
; https://github.com/owainlewis/emacs-color-themes ; Interesantes frases.
;Buena refencia:
; https://www.youtube.com/watch?v=dljNabciEGg&t=245s&ab_channel=HowardAbrams

(setq user-full-name "Guillermo Andres")
(setq user-mail-address "memocampeon35@gmail.com")


;; Create a variable to indicate where emacs's configuration is installed
(setq EMACS_DIR "~/.emacs.d/")

;; Avoid garbage collection at statup
;; (setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
;;       gc-cons-percentage 0.6)

;; (add-hook 'emacs-startup-hook
;;   (lambda ()
;;     (setq gc-cons-threshold 300000000 ; 300mb	
;;           gc-cons-percentage 0.1)))

;First, let’s increase the cache before starting garbage collection:
;(setq gc-cons-threshold 50000000)

;---------------------------Paquetes de Melpa--------------------------------
; install the melpa repository
(require 'package)
(setq package-archives (append package-archives
			       '(("melpa" . "http://melpa.org/packages/"))))


(add-to-list 'package-archives
         '("elpa" . "https://elpa.typefo.com/packages/") t)

(package-initialize)
;(package-refresh-contents)

;; (require 'package)
;; (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
;;                          ("elpa"       . "http://elpa.gnu.org/packages/")
;;                          ("melpa"     . "http://melpa.org/packages/")
;;                          ("marmalade" . "http://marmalade-repo.org/packages/")
;; 						 ))
;; (package-initialize)
;; (package-refresh-contents)


; Use package
;; Bootstrap 'usepackage
(unless (package-installed-p 'use-package)
(package-refresh-contents)
(package-install 'use-package))
;(require 'use-package)

;; Enable use-package
;http://cachestocaches.com/2015/8/getting-started-use-package/
(eval-when-compile
  (require 'use-package))
(require 'bind-key)

;; Set the path variable
(use-package exec-path-from-shell
  :ensure t
  :config (exec-path-from-shell-initialize))


;; Move all the backup files to specific cache directory
;; This way you won't have annoying temporary files starting with ~(tilde) in each directory
;; Following setting will move temporary files to specific folders inside cache directory in EMACS_DIR

(setq user-cache-directory (concat EMACS_DIR "cache"))
(setq backup-directory-alist `(("." . ,(expand-file-name "backups" user-cache-directory)))
      url-history-file (expand-file-name "url/history" user-cache-directory)
      auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-cache-directory)
      projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-cache-directory))



; Quita el echo de shell
(defun my-shell-turn-echo-off ()
  (setq comint-process-echoes t))
(add-hook 'shell-mode-hook 'my-shell-turn-echo-off)

; Para que funcion C-d para kill terminal
(defun my-eshell-quit-or-delete-char (arg)
  (interactive "p")
  (if (and (eolp) (looking-back eshell-prompt-regexp))
      (eshell-life-is-too-much) ;; http://emacshorrors.com/post/life-is-too-much
    (delete-forward-char arg)))
(defun my-eshell-setup ()
  (define-key eshell-mode-map (kbd "C-d") 'my-eshell-quit-or-delete-char))

(add-hook 'eshell-mode-hook 'my-eshell-setup)

#+END_SRC
* Configuracion

  Configura los aspectos basicos del editor en mi preferencia.
#+BEGIN_SRC emacs-lisp

;; Longer whitespace, otherwise syntax highlighting is limited to default column
(setq whitespace-line-column 1000) 

;Configura el mensaje inicial.
(setq initial-scratch-message "")

;; Enable soft-wrap
;; (global-visual-line-mode 1)

;; Maintain a list of recent files opened
(recentf-mode 1)            
(setq recentf-max-saved-items 50)

;Middle-clicking is nice to paste, however it should not adjust point and paste at the then adjusted point.
;(setq mouse-yank-at-point t)

; Tiempo de echo.
(setq echo-keystrokes 0.5)

(set-language-environment "UTF-8")

;I like having the clock. 
;(display-time-mode 1)

;Most programming languages I work with prefer spaces over tabs
(setq-default indent-tabs-mode nil)

;; Make sure tab-width is 4 and not 8
(setq-default tab-width 4)

;Let’s disable questions about theme loading while we’re at it.
(setq custom-safe-themes t)

;Configura a que las lineas no se rompan cuando llegen al limite
(setq-default truncate-lines t)
;if your lines wrap hard at the right-hand edge of the window,
;M-x visual-line-mode

;Commet y descommet
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)

; Ido mode (Better autocompletion in the mini buffer)
;(ido-mode)

;Inicializ Emacs server para sea mas rapido abrir archivos desde la terminal
;emacsclient file.java // By example
(server-start) ;Ya no sera necesario con el plugin zsh emacs.

;Control-Alt-n Encuentra su otro parentesis
;C-M-n forward-sexp
;C-M-b backward-sexp
(global-set-key (kbd "C-c n") 'forward-sexp)
(global-set-key (kbd "C-c b") 'backward-sexp)

;Agregar numeros de lineas
;@reference: https://emacs.stackexchange.com/questions/278/how-do-i-display-line-numbers-in-emacs-not-in-the-mode-line
(add-hook 'prog-mode-hook 'linum-mode)

;@see: https://www.emacswiki.org/emacs/ShowParenMode
;Matches parentesis
(show-paren-mode 1)

;Ocultar tool bar 
(tool-bar-mode -1)
(menu-bar-mode -1) 
;Destacar la línea actual
;(global-hl-line-mode +1)
;Pava ver menu bar solo cuando es ejecutado windos-system (GUI)
;; (if window-system
;;     (menu-bar-mode 1)
;; )

;Don't show intro
(setq inhibit-startup-message t)

;Better answer
(fset 'yes-or-no-p 'y-or-n-p)
; Enable autopair in all buffers
(electric-pair-mode) 

;(global-set-key (kbd "<C-x <up>") tab-bar-switch-to-next-tab)
;(global-set-key (kbd "<C-x <down>") tab-bar-switch-to-prev-tab)

; Se puede utilizar tambien  C-g
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;Refresf buffer
(global-set-key [f5] 'revert-buffer)
;Evoid confirmation
;(global-set-key [f5] (lambda () (interactive) (revert-buffer nil t)))

(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key (kbd "C-c <down>")  'windmove-down)

(global-set-key (kbd "C-x C-b") 'ibuffer)

(global-set-key (kbd "C-x g") 'goto-line)
;jump function M.]  dump-jump
;(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)


#+END_SRC

* Fonts
#+BEGIN_SRC emacs-lisp
;Aumentar tamaño de letra, before config: 130
(set-face-attribute 'default nil :height 140)

;Cambiar fuente
; Descubrir fuentes: M-x describe-font
; file name: /usr/share/fonts/droid/DroidSansMono.ttf
;; Set default font
;; (set-face-attribute 'default nil
;;                     :family "Source Code Pro"
;;                     :height 143
;;                     :weight 'normal
;;                     :width 'normal)

;; (set-face-attribute 'default nil
;;                     :family "DejaVu Sans Mono"
;;                     :height 143
;;                     :weight 'normal
;;                     :width 'normal)

;; (set-face-attribute 'default nil
;;                     :family "Inconsolata"
;;                     :height 160
;;                     :weight 'normal
;;                     :width 'normal)

;(set-face-attribute 'default nil :family "Monaco" :height 140 :weight 'normal)
(set-face-attribute 'default nil :family "Droid Sans Mono" :height 135 :weight 'normal)

;Font
;Inconsolata

; En lips la variable del nombre de tu sistema system-type.
;M-x eval-expression system-type
; windows-nt : en Windows 
; gnu/linux :  en GNU/Linux

; Datos curiosos
;fuentes para programadores”, desde el inicio de los tiempos (y por que creo que todos los gnus la traen) DejaVu Sans (mono) 
;; (if (condición)
;; (Expresiones si se cumple la condición)
;; (Expresiones si no se cumple la condición))

;; Fuente
;; (if (eq system-type 'windows-nt)
;;     (set-face-attribute 'default nil :family "Consolas" :height 110)
;;     (set-face-attribute 'default nil :family "Roboto Mono" :height 110)
;; )

#+END_SRC

* Nyan-mode
  Personaliza la powerline de emacs.
#+BEGIN_SRC emacs-lisp
;Nyan mode (Gatito)
(use-package nyan-mode
  :ensure t
  :config
  (nyan-mode)
)

#+END_SRC
* Helm
  Ayuda al manejo invenso de los comando de emacs.
#+BEGIN_SRC emacs-lisp
(use-package helm
:ensure t
:init 
(helm-mode 1)
(progn (setq helm-buffers-fuzzy-matching t))
:bind
(("C-c h" . helm-command-prefix))
(("M-x" . helm-M-x))
(("C-c f" . helm-recentf))   ;; Add new key to recentf
(("M-y" . helm-show-kill-ring))
(("C-s" . helm-occur))
(([f10] . 'helm-semantic-or-imenu))
(("C-c g" . helm-grep-do-git-grep)))  ;; Search using grep in a git project

#+END_SRC

* Counsel
#+BEGIN_SRC emacs-lisp
; Lo instale con melpa.

;Helm mode
;(global-set-key (kbd "M-x") 'helm-M-x)
; Helm
;(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x b") 'counsel-switch-buffer)
;(global-set-key (kbd "C-x C-f") 'helm-find-files)

(global-set-key (kbd "C-x C-f") 'counsel-find-file)

;(helm-mode 1)
;(global-set-key (kbd "M-y") 'helm-show-kill-ring)
;(global-set-key (kbd "C-s") 'helm-occur)
;(global-set-key [f11] 'helm-semantic-or-imenu)

#+END_SRC

* popwin
  Lo que hace es que algunas ventanas las convierten en emergentes para que no en el windows  y se puede eliminar facilmente con C-g.

#+BEGIN_SRC emacs-lisp
 (use-package popwin
  :ensure t
  :init
  (popwin-mode 1)
)
#+END_SRC

* Company
  Ayuda al autocomplete of several languages.

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0.2)
  (setq company-show-numbers t)
  (setq company-tooltip-limit 10)
  (setq company-minimum-prefix-length 2)
  (setq company-tooltip-align-annotations t)
  ;; invert the navigation direction if the the completion popup-isearch-match
  ;; is displayed on top (happens near the bottom of windows)
  (setq company-tooltip-flip-when-above t)
  (global-company-mode))

;; manual autocomplete
(global-set-key (kbd "<C-return>") 'company-complete)

#+END_SRC

* Company-quickhelp
  Visualiza la documentacion de la funciones.
#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :ensure t
  :config
  (company-quickhelp-mode)
)
#+END_SRC

* Which-key
  Genera un menu de ayuda con para las prefix command.
#+BEGIN_SRC emacs-lisp
(use-package which-key 
:ensure t 
:init
(which-key-mode)
)
#+END_SRC

* Neotree
#+BEGIN_SRC emacs-lisp

;(add-to-list 'load-path "~/.emacs.d/plugins/emacs-neotree/")
;(require 'neotree)
;(global-set-key [f12] 'neotree-toggle)
(use-package neotree
:ensure t
:config
(setq neo-theme 'icons)
(global-set-key [f9] 'neotree-toggle))

#+END_SRC

* Web-mode
#+BEGIN_SRC emacs-lisp
;Previamente lo habia instalado con melpa

;; disable {} auto pairing in electric-pair-mode for web-mode
;https://www.topbug.net/blog/2016/09/29/emacs-disable-certain-pairs-for-electric-pair-mode/
(add-hook
 'web-mode-hook
 (lambda ()
   (setq-local electric-pair-inhibit-predicate
               `(lambda (c)
                  (if (char-equal c ?{) t (,electric-pair-inhibit-predicate c))))))

;Enable emmet automatly sgml(Lenguajes de etiqueta)
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
(add-hook 'web-mode  'emmet-mode) ;; enable Emmet's web mode abbreviation.

;Agrega los archivos.html web mode
(require 'web-mode) 
;(add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))

;Configuration
;; (defun my-web-mode-hook ()
;;   "Hooks for Web mode."
;;   (setq web-mode-markup-indent-offset 2)
;;   (setq web-mode-code-indent-offset 2)
;;   (setq web-mode-css-indent-offset 2)
;; )
;; (add-hook 'web-mode-hook  'my-web-mode-hook)    
;; (setq tab-width 2)

;Agregar emmet in web mode
(add-hook 'web-mode-hook  'emmet-mode)
;Highlight current HTML element
(setq web-mode-enable-current-element-highlight t)
; highlight the current column with 
;(setq web-mode-enable-current-column-highlight t)
;(setq web-mode-enable-auto-pairing t)
(define-key web-mode-map (kbd "C-n") 'web-mode-tag-match)
;(setq web-mode-markup-indent-offset 2)



#+END_SRC
* Company-web
  Ajusta los autocomplete en web mode.
#+BEGIN_SRC emacs-lisp
;; you may key bind, for example for web-mode:
;; (define-key web-mode-map (kbd "C-'") 'company-web-html)
;; ;Only use company-mode with company-web-html in web-mode

(defun my-web-mode-hook ()
  "Hook for `web-mode'."
    (set (make-local-variable 'company-backends)
         '(company-css company-web-html company-yasnippet company-files)))

(add-hook 'web-mode-hook 'my-web-mode-hook)

;; (eval-after-load "company"
;;   '(add-to-list 'company-backends 'company-bootstrap))


;; (add-hook 'after-init-hook 'global-company-mode)
;; (eval-after-load "company"
;;   '(add-to-list 'company-backends 'company-bootstrap))

;; Enable JavaScript completion between <script>...</script> etc.
(advice-add 'company-tern :before
            #'(lambda (&rest _)
                (if (equal major-mode 'web-mode)
                    (let ((web-mode-cur-language
                          (web-mode-language-at-pos)))
                      (if (or (string= web-mode-cur-language "javascript")
                              (string= web-mode-cur-language "jsx"))
                          (unless tern-mode (tern-mode))
                        (if tern-mode (tern-mode -1)))))))

;; manual autocomplete
;(define-key web-mode-map (kbd "M-RET") 'company-complete)
(define-key web-mode-map (kbd "C-c -") 'company-bootstrap)

#+END_SRC

* Yasnippet
#+begin_src emacs-lisp :tangle yes

;Automatizar mis plugins para que se instalen solos si no los tengo.
;; (use-package yasnippet :config (yas-global-mode))
;; (use-package yasnippet-snippets :ensure t)

;yasnippet
(add-to-list 'load-path
              "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)

#+end_src
* Traduccion

#+BEGIN_SRC emacs-lisp

;Define word (Search a dictionary wordnik)
(global-set-key (kbd "C-c d") 'define-word-at-point)
(global-set-key (kbd "C-c D") 'define-word)

; Google translate
;(setq google-translate-default-source-language "auto")  ; Auto detect language.
(setq google-translate-default-source-language "en")  ; Auto detect language.
(setq google-translate-default-target-language "es")    ; Set your target language.
;Binding or shortcuts
(global-set-key (kbd "C-c t") 'google-translate-at-point)
(global-set-key (kbd "C-c T") 'google-translate-query-translate)

;Reverse translate
(global-set-key (kbd "C-c r") 'google-translate-at-point-reverse)
(global-set-key (kbd "C-c R") 'google-translate-query-translate-reverse)

; Corrector ortografico  ( spell checker )
(setq-default ispell-program-name "aspell")
	
(setq ispell-dictionary "english")

;M $ :Check and correct spelling of the word at point (ispell-word). If the region is active, do it for all words in the region instead.
;M-x ispell : Check and correct spelling of all words in the buffer. If the region is active, do it for all words in the region instead. 
;M-x flyspell-prog-mode : Enable Flyspell mode for comments and strings only. 
;M-x flyspell-mode : Enable Flyspell mode, which highlights all misspelled words. 

;Flyspell comes with a mode to check comments and strings in programming modes. Just type M-x flyspell-prog-mode or add it to your mode hooks
  ;; (add-hook 'c++-mode-hook
  ;;         (lambda ()
  ;;           (flyspell-prog-mode)
  ;;           ; ...
  ;;           ))

(add-hook 'LaTeX-mode-hook 'flyspell-mode) ;start flyspell-mode
;(add-hook 'c++-mode-hook 'flyspell-prog-mode)

#+END_SRC
* Langtool
  Herramienta para corregir ortografia.
#+BEGIN_SRC 

;(setq langtool-language-tool-jar "~/bin/LanguageTool-5.1/languagetool-commandline.jar")
;(require 'langtool)

;; (global-set-key "\C-x4w" 'langtool-check)
;; (global-set-key "\C-x4W" 'langtool-check-done)
;; (global-set-key "\C-x4l" 'langtool-switch-default-language)
;; (global-set-key "\C-x44" 'langtool-show-message-at-point)
;; (global-set-key "\C-x4c" 'langtool-correct-buffer)
;(setq langtool-default-language "en-US")

#+END_SRC
* Rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
:ensure t
:defer t
:config
(add-hook 'prog-mode-hook #'prog-delimiters-mode))
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp
;; (use-package flycheck :ensure t :init (global-flycheck-mode))

;(add-hook 'c-mode-hook 'flycheck-mode)
;(add-hook 'c++-mode-hook 'flycheck-mode)
;(add-hook 'java-mode-hook 'flycheck-mode)

#+END_SRC

* Impatient-mode
  Cambios en tiempo real en archivos html, css y javascript.
#+BEGIN_SRC emacs-lisp

;Use impatient-mode
;M-x httpd-start
;M-x impatient-mode
;http://localhost:8080/imp/

#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp

;Previuw markdown
(defun markdown-html (buffer)
  (princ (with-current-buffer buffer
    (format "<!DOCTYPE html><html><title>Impatient Markdown</title><xmp theme=\"united\" style=\"display:none;\"> %s  </xmp><script src=\"http://strapdownjs.com/v/0.2/strapdown.js\"></script></html>" (buffer-substring-no-properties (point-min) (point-max))))
  (current-buffer)))

;Tell impatient mode to use it: M-x imp-set-user-filter RET markdown-html RET
;https://stackoverflow.com/questions/36183071/how-can-i-preview-markdown-in-emacs-in-real-time/36189456
;https://blog.bitsandbobs.net/blog/emacs-markdown-live-preview/

;; (defun my-markdown-preview ()
;;   "Preview markdown."
;;   (interactive)
;;   (httpd-start)
;;   (impatient-mode)
;;   (imp-set-user-filter "markdown-html")
;;   )

#+END_SRC
* Visual-line-mode
#+BEGIN_SRC emacs-lisp

(add-hook 'markdown-mode-hook  'visual-line-mode)
(add-hook 'text-mode-hook  'visual-line-mode)
(add-hook 'org-mode  'visual-line-mode)
(add-hook 'web-mode-hook  'visual-line-mode)

#+END_SRC
* Multiple-cursors
#+BEGIN_SRC emacs-lisp
; Lo instale previmanete con melpa.
(require 'multiple-cursors)

(global-set-key (kbd "C-c C-m") 'mc/edit-lines)

(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
(global-set-key (kbd "C-c C-a") 'mc/skip-to-previous-like-this)
(global-set-key (kbd "C-M-<mouse-1>") 'mc/add-cursor-on-click)

#+END_SRC
* quickrun
  Ejecuta programas, lo he probado con programas de java que contiene el metodo main.
#+BEGIN_SRC emacs-lisp
(use-package quickrun 
:ensure t
:bind ("C-c r" . quickrun))
#+END_SRC

* lsp-mode 
#+BEGIN_SRC emacs-lisp

;@refernce
;https://github.com/neppramod/java_emacs/blob/master/emacs-configuration.org
;Solo funciona con la version reciente de java 11, asi tienes que cambiar tu java8 a java 11
;ensure t - Signigica que use-package ira a buscar el paquete si no tienes descargado.

(use-package lsp-mode
:ensure t
;; :hook (
;;    (lsp-mode . lsp-enable-which-key-integration)
;;    (java-mode . #'lsp-deferred)
;; )
:init (setq 
    ;; lsp-keymap-prefix "C-c l"              ; this is for which-key integration documentation, need to use lsp-mode-map
    ;; lsp-enable-file-watchers nil
    read-process-output-max (* 1024 1024)  ; 1 mb
    lsp-completion-provider :capf
    lsp-idle-delay 0.500
)
:config 
    ;; (setq lsp-intelephense-multi-root nil) ; don't scan unnecessary projects
    ;; (with-eval-after-load 'lsp-intelephense
    ;; (setf (lsp--client-multi-root (gethash 'iph lsp-clients)) nil))
	;; (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
	(global-set-key (kbd "C-c l") 'helm-lsp-code-actions)
)


#+END_SRC

* lsp-java
#+BEGIN_SRC emacs-lisp
(use-package lsp-java 
:ensure t
;; :config (add-hook 'java-mode-hook 'lsp)
)
#+END_SRC

* Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :config
  (global-set-key [f12] 'treemacs)
  (global-set-key (kbd "C-c p") 'treemacs-add-project)
)
#+END_SRC

* Development
  Ajuste para todos los lenguajes.

#+BEGIN_SRC emacs-lisp
;Compila any file 
(global-set-key (kbd "C-c c") 'compile)

;MUestro los numeros a color
(add-hook 'prog-mode-hook 'highlight-numbers-mode)
;(hes-mode)

; Configuracion para que muestre las secuencias de escape a color.
(defface my-backslash-escape-backslash-face
  '((t :inherit font-lock-regexp-grouping-backslash))
  "Face for the back-slash component of a back-slash escape."
  :group 'font-lock-faces)

(defface my-backslash-escape-char-face
  '((t :inherit font-lock-regexp-grouping-construct))
  "Face for the charcter component of a back-slash escape."
  :group 'font-lock-faces)

(defface my-format-code-format-face
  '((t :inherit font-lock-regexp-grouping-backslash))
  "Face for the % component of a printf format code."
  :group 'font-lock-faces)

(defface my-format-code-directive-face
  '((t :inherit font-lock-regexp-grouping-construct))
  "Face for the directive component of a printf format code."
  :group 'font-lock-faces)


(font-lock-add-keywords 'c-mode
   '(("\\(\\\\\\)." 1 'my-backslash-escape-backslash-face prepend)
     ("\\\\\\(.\\)" 1 'my-backslash-escape-char-face      prepend)
     ("\\(%\\)."    1 'my-format-code-format-face         prepend)
     ("%\\(.\\)"    1 'my-format-code-directive-face      prepend)))

(font-lock-add-keywords 'java-mode
   '(("\\(\\\\\\)." 1 'my-backslash-escape-backslash-face prepend)
     ("\\\\\\(.\\)" 1 'my-backslash-escape-char-face      prepend)
     ("\\(%\\)."    1 'my-format-code-format-face         prepend)
     ("%\\(.\\)"    1 'my-format-code-directive-face      prepend)))

(font-lock-add-keywords 'c++mode
   '(("\\(\\\\\\)." 1 'my-backslash-escape-backslash-face prepend)
     ("\\\\\\(.\\)" 1 'my-backslash-escape-char-face      prepend)
     ("\\(%\\)."    1 'my-format-code-format-face         prepend)
     ("%\\(.\\)"    1 'my-format-code-directive-face      prepend)))



#+END_SRC
 
* C++
#+BEGIN_SRC emacs-lisp

;Modifica los espacion 4 for C/C++
(defun my-c++-mode-hook ()
  (setq c-basic-offset 4)
  (c-set-offset 'substatement-open 0))
(add-hook 'c++-mode-hook 'my-c++-mode-hook)
(add-hook 'c-mode-hook 'my-c++-mode-hook)



#+END_SRC

* C
#+BEGIN_SRC emacs-lisp
;(add-to-list 'company-backends 'company-c-headers)

#+END_SRC
* AjustandoFrame
  Ajusta la pantalla.
#+BEGIN_SRC emacs-lisp

;progn me parece es para agrupar varias sentencias ene un if.

;Set default size windows
(if (display-graphic-p)
    (progn
      (setq initial-frame-alist
            '(
              (tool-bar-lines . 0)
              (width . 117) ; chars
              (height . 31) ; lines
              ;(background-color . "#1D1F21") ;Tono mas suave para dream.
              ))
      (setq default-frame-alist
            '(
              (tool-bar-lines . 0)
              (width . 117)
              (height . 31)
              ;(background-color . "#1D1F21")
              ))
      (set-frame-position (selected-frame) 300 175) ;My ajustando posicion del frame.
      )
  (progn
    (setq initial-frame-alist '( (tool-bar-lines . 0)))
    (setq default-frame-alist '( (tool-bar-lines . 0))))
)

; Para que agarre el color en nw, es decir, terminal
; Reference: https://emacs.stackexchange.com/questions/47452/why-doesnt-set-background-color-work-in-my-init-file
(if (eq window-system 'nil)    
     (add-to-list 'default-frame-alist '(background-color . "#1D1F21"))     
  )



; Puedes mostrar los coloser con M-x list-colors-display
; Y ajustar la franje del marcado con:
;(set-face-background 'region "#7f7f7f") ;Adecuado para theme dream in terminal.

#+END_SRC

* HowInstallPlugin
#+BEGIN_SRC emacs-lisp
; Example how install plugins.
;; (add-to-list 'load-path "/home/guillermo/.emacs.d/plugins/powerline/")
;; (require 'powerline) ; or (load 'file)
;; (powerline-default-theme)
;; (set-cursor-color "orange")
;; (set-background-color "#000000") 
#+END_SRC
* Other
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(sublime-themes default-text-scale color-theme-sanityinc-tomorrow helm-lsp quickrun company-bootstrap doom-modeline multiple-cursors flymd company-box company-quickhelp mode-icons yasnippet-snippets which-key web-mode use-package rainbow-delimiters projectile nyan-mode neotree magit lsp-java langtool kaolin-themes impatient-mode highlight-numbers highlight-escape-sequences helm google-translate flycheck exec-path-from-shell emmet-mode eglot dumb-jump doom-themes define-word dashboard counsel company-web company-c-headers all-the-icons ac-html-csswatcher ac-html ac-clang ac-capf ac-c-headers)))


#+END_SRC
